<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深拷贝与浅拷贝</title>
      <link href="/2021/12/19/shen-kao-bei-yu-qian-kao-bei/"/>
      <url>/2021/12/19/shen-kao-bei-yu-qian-kao-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="深拷贝-amp-浅拷贝"><a href="#深拷贝-amp-浅拷贝" class="headerlink" title="深拷贝 &amp;浅拷贝"></a>深拷贝 &amp;浅拷贝</h1><h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><p>数据分为基本数据类型：(String, Number, Boolean, Null, Undefined，Symbol) 和引用数据类型：（Object、Array、Function)。</p><blockquote><p>注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</p></blockquote><ul><li><p>基本数据类型的特点：直接存储在栈(stack)中的数据</p></li><li><p>引用数据类型的特点：<strong>存储的是该对象在栈中引用，真实的数据存放在堆内存里</strong></p></li></ul><img src="/2021/12/19/shen-kao-bei-yu-qian-kao-bei/image-20211215162742823.png" style="zoom:80%;"><h2 id="二、浅拷贝与深拷贝"><a href="#二、浅拷贝与深拷贝" class="headerlink" title="二、浅拷贝与深拷贝"></a>二、浅拷贝与深拷贝</h2><ul><li><p><strong>浅拷贝：创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</strong></p></li><li><p><strong>深拷贝：将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象</strong></p><img src="/2021/12/19/shen-kao-bei-yu-qian-kao-bei/image-20211215163458697.png" style="zoom:80%;"><img src="/2021/12/19/shen-kao-bei-yu-qian-kao-bei/image-20211215163526376.png" style="zoom:80%;"></li></ul><h2 id="三、赋值与浅拷贝-深拷贝的区别"><a href="#三、赋值与浅拷贝-深拷贝的区别" class="headerlink" title="三、赋值与浅拷贝/深拷贝的区别"></a>三、赋值与浅拷贝/深拷贝的区别</h2><ul><li><p><strong>赋值：当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在栈中的地址，而不是堆中的数据（这里说的是引用类型），也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。如果是基本类型，实际上是在内存中新开一段栈内存，然后再将值赋值到新的栈中。</strong>（详见文章最后）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 对象赋值</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name <span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    arr <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj1'</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// obj1 &amp;#123; name: '李四', arr: [ 1, [ 5, 6, 7 ], 4 ] &amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj2'</span><span class="token punctuation">,</span>obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// obj2 &amp;#123; name: '李四', arr: [ 1, [ 5, 6, 7 ], 4 ] &amp;#125;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 浅拷贝</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name <span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    arr <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj3<span class="token operator">=</span><span class="token function">shallowClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>obj3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>obj3<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新旧对象还是共享同一块内存</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj1'</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// obj1 &amp;#123; name: '张三', arr: [ 1, [ 5, 6, 7 ], 4 ] &amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj3'</span><span class="token punctuation">,</span>obj3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// obj3 &amp;#123; name: '李四', arr: [ 1, [ 5, 6, 7 ], 4 ] &amp;#125;</span></code></pre><blockquote><p>赋值是两个对象指向同一存储空间，任何一方改变，存储的内容都会变</p><p>浅拷贝：属性是基本类型的话会完全克隆一份一样的数据，改变自己不会影响到另一方，属性如果是引用对象则会影响到另一方，因为引用类型，拷贝的是内存地址。</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 深拷贝</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name <span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    arr <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj4<span class="token operator">=</span><span class="token function">deepClone</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>obj4<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>obj4<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新对象跟原对象不共享内存</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj1'</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// obj1 &amp;#123; name: '张三', arr: [ 1, [ 2, 3 ], 4 ] &amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj4'</span><span class="token punctuation">,</span>obj4<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// obj4 &amp;#123; name: '李四', arr: [ 1, [ 5, 6, 7 ], 4 ] &amp;#125;</span></code></pre><blockquote><p>深拷贝完全复制了一份一模一样的数据，改变自己不会影响另一方</p></blockquote></li><li><p>需要注意的是：</p><ul><li>对一个对象进行浅拷贝，该对象下的基本类型属性会开辟新的空间，引用类型属性是还是指向同一块空间。而对象间的直接复制，只是把对象B的地址指向对象A。</li><li>浅拷贝和深拷贝是一个相对概念。</li></ul></li></ul><h2 id="四、浅拷贝和深拷贝实现的方式"><a href="#四、浅拷贝和深拷贝实现的方式" class="headerlink" title="四、浅拷贝和深拷贝实现的方式"></a>四、浅拷贝和深拷贝实现的方式</h2><ul><li><p>浅拷贝实现方式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 封装浅拷贝的方法</span><span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            target<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>。    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Object的hasOwnProperty()方法返回一个布尔值，判断对象是否包含特定的自身（非继承）属性</span></code></pre></li><li><p>1.深拷贝实现方式（只考虑了普通的object，采用递归的方式）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> cloneTarget <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cloneTarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre></li><li><p>2.考虑数组</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> cloneTarget <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cloneTarget<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cloneTarget<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//运行</span><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    field1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    field2<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>    field3<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        child<span class="token punctuation">:</span> <span class="token string">'child'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    field4<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//结果</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    field1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    field2<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>    field3<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>child<span class="token punctuation">:</span> <span class="token string">'child'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    field4<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>执行以下代码会导致溢出，原因就是上面的对象存在循环引用的情况，即对象的属性间接或直接的引用了自身的情况</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    field1<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    field2<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>    field3<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        child<span class="token punctuation">:</span> <span class="token string">'child'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    field4<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>target<span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span></code></pre><ul><li><p>解决循环引用问题，我们可以额外开辟一个存储空间，来存储当前对象和拷贝对象的对应关系，当需要拷贝当前对象时，先去存储空间中找，有没有拷贝过这个对象，如果有的话直接返回，如果没有的话继续拷贝。</p><p>这个存储空间，需要可以存储<code>key-value</code>形式的数据，且<code>key</code>可以是一个引用类型，我们可以选择<code>Map</code>这种数据结构：</p><ul><li>检查<code>map</code>中有无克隆过的对象</li><li>有 - 直接返回</li><li>没有 - 将当前对象作为<code>key</code>，克隆对象作为<code>value</code>进行存储</li><li>继续克隆</li></ul></li><li><p>进阶：<code>WeakMap</code>替代<code>Map</code></p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果是null或者undefined我就不进行拷贝操作</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 是对象的话就要进行深拷贝</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 找到的是所属类原型上的constructor,而原型上的 constructor指向的是当前类本身</span>  hash<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 实现一个递归拷贝</span>      cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> address<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>o <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对象存在循环引用的情况</span><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>address<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>封装</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//深克隆（深克隆不考虑函数）</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> result <span class="token operator">||</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 引用值(obj/array)且不为null</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Object]'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 对象</span>                    result<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 数组</span>                    result<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 原始值或func</span>        result<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 深浅克隆是针对引用值</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'[object Array]'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数组</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对象</span>        result <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> prop <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 无法复制函数</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> jsON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="五、附录"><a href="#五、附录" class="headerlink" title="五、附录"></a>五、附录</h2><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p>基本类型：a=1，b=a，是直接将b=1了存在栈中</p><p>基本类型赋值是赋的值，所以应该是相互独立的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> aconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//b=1</span>a <span class="token operator">=</span> <span class="token number">2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//a=2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//b=1</span></code></pre><p>引用类型：因为引用类型是存放在堆中，对象赋值赋的是地址，b= obj1，是将obj1的地址赋给b，所以不管改变对象里面哪种类型，都会发生改变。两个变量，各自占用一个地址来保存自身，同时 a b 保存的值是同一个地址 指向同一块内存</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name <span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    arr <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj1'</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// obj1 &amp;#123; name: '李四', arr: [ 1, [ 5, 6, 7 ], 4 ] &amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj2'</span><span class="token punctuation">,</span>obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// obj2 &amp;#123; name: '李四', arr: [ 1, [ 5, 6, 7 ], 4 ] &amp;#125;</span></code></pre><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>引用类型：比如下面的obj1，浅拷贝时在堆中创建一块内存用来存放被拷贝的对象（里面的基本类型拷贝的是值，引用类型拷贝的是地址）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name <span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    arr <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">WeakMap</a></li><li><a href="https://lodash.com/">lodash</a></li></ul><blockquote><p>很多是从其他作者那里作为笔记搬运的，只作为自己学习的笔记和总结，妖魔鬼怪快离开~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深/浅拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+GitHub搭建博客</title>
      <link href="/2021/12/12/hexo-da-jian-bo-ke/"/>
      <url>/2021/12/12/hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-GitHub搭建个人博客网站"><a href="#Hexo-GitHub搭建个人博客网站" class="headerlink" title="Hexo+GitHub搭建个人博客网站"></a>Hexo+GitHub搭建个人博客网站</h1><h5 id="建立博客的原因："><a href="#建立博客的原因：" class="headerlink" title="建立博客的原因："></a>建立博客的原因：</h5><ul><li>分享技术</li><li>输出倒逼知识输入（费曼学习法）</li><li>作为收藏夹（经常想记录一下东西但是七零八落）</li></ul><h6 id="不确定博客能写多久，可能会很久不更新，但是三分钟热度有三分钟收获嘛"><a href="#不确定博客能写多久，可能会很久不更新，但是三分钟热度有三分钟收获嘛" class="headerlink" title="不确定博客能写多久，可能会很久不更新，但是三分钟热度有三分钟收获嘛"></a>不确定博客能写多久，可能会很久不更新，但是三分钟热度有三分钟收获嘛</h6><h3 id="搭建过程："><a href="#搭建过程：" class="headerlink" title="搭建过程："></a>搭建过程：</h3><h4 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h4><ul><li>下载<a href="https://nodejs.org/en/">Node.js (nodejs.org)</a>(Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)<ul><li>在cmd中输入 <code>node -v</code>可查看node版本</li></ul></li><li>安装Git</li><li>准备github账号</li></ul><h4 id="安装Hexo："><a href="#安装Hexo：" class="headerlink" title="安装Hexo："></a>安装Hexo：</h4><ul><li>首先创建一个放置博客的文件夹，进入文件夹，右键Git Bash Here，输入下面的指令，添加国内镜像源,加快下载插件速度</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org</code></pre><ul><li>使用npm安装Hexo</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span>  <span class="token function">install</span> -g hexo-cli//输入hexo -v 可查看是否安装成功</code></pre><ul><li>初始化Hexo</li></ul><pre class=" language-bash"><code class="language-bash">$ hexo init</code></pre><ul><li>Hexo初始化后 ，有以下几个文件/文件夹。<ul><li>  <code>scaffolds：</code>生成文章的一些模板</li><li><code>source：</code>用来存放你的文章</li><li><code>themes：</code>主题</li><li>.<code>gitignore </code>Git忽略文件夹</li><li><code>_config.yml:</code> 博客的配置文件</li><li><code>package.json</code> 所需模块</li><li><code>node_modules:</code> 依赖包</li><li><code>package-lock.json</code> 记录了模块下载地址</li></ul></li><li>安装依赖：</li></ul><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> intall </code></pre><ul><li><p>生成页面文件：</p><pre class=" language-bash"><code class="language-bash">$ hexo generate      <span class="token comment" spellcheck="true">#或者简写hexo g</span></code></pre></li><li><p>本地预览：</p><pre class=" language-bash"><code class="language-bash">$ hexo server        <span class="token comment" spellcheck="true">#或者简写hexo s</span></code></pre><p>打开浏览器，输入<code>127.0.0.1:4000</code> 即可预览本地效果</p></li></ul><p>至此Hexo已经安装完毕，可<code>hexo new newname</code>新建文章(默认post布局)</p><h4 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h4><ul><li><p>创建仓库:</p><p>需要 注意的是，仓库名有要求,要创建一个和你用户名相同的仓库，后面加<code>github.io</code>，只有这样，将来要部署到GitHub page的时候，才会被识别， id为Ring0814，那么我的仓库名必须为Ring0814.github.io</p></li><li><p>生成SSH密钥</p><p>博客文件夹根目录下，右键Git Bash Here，输入</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span>  config --global  user.name    <span class="token string">"githubid"</span>$ <span class="token function">git</span>  config --global  user.email     <span class="token string">"email"</span></code></pre><p>这里<code>id</code>和<code>email</code>换成你自己的信息，然后生成<code>ssh</code>密钥</p><pre class=" language-bash"><code class="language-bash">$ ssh-keygen  -t rsa -C <span class="token string">"email"</span>$ <span class="token function">cat</span>  ~/.ssh/id_rsa.pub</code></pre><p>将输入的内容复制，打开Github右上角的Settings,找到<code>SSH and GPG keys</code>，然后新建一个<code>key</code>，<code>key</code>的名字随意填一个，内容即刚复制的内容。</p><p><img src="/2021/12/12/hexo-da-jian-bo-ke/image-20211212183118279.png" alt="image-20211212183118279"></p></li><li><p>部署：</p></li><li><p>安装deploy-git 插件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre></li><li><p>修改_config.yaml文件最后几行</p><pre class=" language-yml"><code class="language-yml">   deploy:     type: git     repository: https://github.com/axh2018/axh2018.github.io     branch: master</code></pre></li><li><p>部署到Github</p><pre class=" language-bash"><code class="language-bash">   $ hexo clean        <span class="token comment" spellcheck="true">#删除原来生成的pubic文件夹</span>   $ hexo g            <span class="token comment" spellcheck="true">#生成新的页面</span>   $ hexo d            <span class="token comment" spellcheck="true">#部署到GitHub</span></code></pre></li></ul><p> 部署成功后可以通过 <a href="https://userid.github.io访问/">https://userid.github.io访问</a></p><h4 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h4><p>​        相信Hexo默认的主题并不是大多数人喜欢的，所有我们可以更改为自己喜欢的主题，Hexo官网为我们提供了非常多的主题选择，也可以选择网上其他主题。</p><p>[^先更到这吧]: </p><h6 id="Front-matter-是文件最上方以-分隔的区域（写键值对时注意中间空格）"><a href="#Front-matter-是文件最上方以-分隔的区域（写键值对时注意中间空格）" class="headerlink" title="Front-matter 是文件最上方以 --- 分隔的区域（写键值对时注意中间空格）"></a>Front-matter 是文件最上方以 <code>---</code> 分隔的区域（写键值对时注意中间空格）</h6>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/12/my-new-post/"/>
      <url>/2021/12/12/my-new-post/</url>
      
        <content type="html"><![CDATA[<p>  title: my new post #可以改成中文的，如“新文章”<br>  date: 2016-02-21 16:04:09 #发表日期，一般不改动<br>  categories: blog #文章文类<br>  tags: [文章] #文章标签，多于一项时用这种格式，只有一项时使用tags: blog<br>  –<br>  这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上<br>  <span id="more"></span>，在<!--more-->之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more    才能看到。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/12/hello-world/"/>
      <url>/2021/12/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
